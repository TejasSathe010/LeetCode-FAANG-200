Pattern,Problem,LeetCode Link,Short Description,Brute Force Intuition,Better Solution Intuition,Optimal Solution Intuition,Time Complexity (Brute),Time Complexity (Optimal),Space Complexity (Brute),Space Complexity (Optimal)
Arrays & Hashing,Two Sum,https://leetcode.com/problems/two-sum/,Find indices of two numbers adding to target,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Contains Duplicate,https://leetcode.com/problems/contains-duplicate/,Detect if any value repeats,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Valid Anagram,https://leetcode.com/problems/valid-anagram/,Check if two strings are anagrams,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Group Anagrams,https://leetcode.com/problems/group-anagrams/,Group strings that are anagrams,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Top K Frequent Elements,https://leetcode.com/problems/top-k-frequent-elements/,Return K most frequent integers,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Product of Array Except Self,https://leetcode.com/problems/product-of-array-except-self/,Return product of array except for each index,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Encode and Decode Strings,https://leetcode.com/problems/encode-and-decode-strings/,Serialize list of strings,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Longest Consecutive Sequence,https://leetcode.com/problems/longest-consecutive-sequence/,Length of longest sequence of consecutive ints,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Set Matrix Zeroes,https://leetcode.com/problems/set-matrix-zeroes/,Set entire row & col to zero if element is zero,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Intersection of Two Arrays,https://leetcode.com/problems/intersection-of-two-arrays/,Return intersection of two arrays,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Majority Element,https://leetcode.com/problems/majority-element/,Find element appearing > n/2 times,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Rotate Array,https://leetcode.com/problems/rotate-array/,Rotate array k steps to right,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Spiral Matrix,https://leetcode.com/problems/spiral-matrix/,Return elements of matrix spiral order,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Plus One,https://leetcode.com/problems/plus-one/,Add one to integer array digits,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Arrays & Hashing,Merge Sorted Array,https://leetcode.com/problems/merge-sorted-array/,Merge two sorted arrays in-place,Nested loops or sorting to compare every pair/element.,Use hash maps/sets to store seen data and query in O(1).,Linear scan with hash map achieving O(n) overall.,O(n^2),O(n),O(1),O(n)
Two Pointers,Reverse String,https://leetcode.com/problems/reverse-string/,Reverse characters in array in-place,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,Valid Palindrome,https://leetcode.com/problems/valid-palindrome/,Check if alphanumeric string is palindrome,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,Two Sum II - Input array is sorted,https://leetcode.com/problems/two-sum-ii---input-array-is-sorted/,Find indices in sorted array,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,3Sum,https://leetcode.com/problems/3sum/,Triplets sum to zero,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,3Sum Closest,https://leetcode.com/problems/3sum-closest/,Triplet sum closest to target,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,Move Zeroes,https://leetcode.com/problems/move-zeroes/,Move zeros to end preserving order,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,Remove Duplicates from Sorted Array,https://leetcode.com/problems/remove-duplicates-from-sorted-array/,In-place unique elements,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,Container With Most Water,https://leetcode.com/problems/container-with-most-water/,Max area between lines,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,Trapping Rain Water,https://leetcode.com/problems/trapping-rain-water/,Total water trapped,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Two Pointers,Squares of a Sorted Array,https://leetcode.com/problems/squares-of-a-sorted-array/,Squares sorted,Check all pairs or reverse using extra array.,Sort or convert then apply two pointers.,Maintain left/right pointers that converge in one pass.,O(n^2),O(n),O(n),O(1)
Sliding Window,Best Time to Buy and Sell Stock,https://leetcode.com/problems/best-time-to-buy-and-sell-stock/,Max profit single transaction,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Best Time to Buy and Sell Stock II,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/,Max profit multiple transactions,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Longest Substring Without Repeating Characters,https://leetcode.com/problems/longest-substring-without-repeating-characters/,Length longest substring without repeats,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Longest Repeating Character Replacement,https://leetcode.com/problems/longest-repeating-character-replacement/,Longest substring after k replacements,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Minimum Window Substring,https://leetcode.com/problems/minimum-window-substring/,Smallest substring containing pattern,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Sliding Window Maximum,https://leetcode.com/problems/sliding-window-maximum/,Max of each window size k,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Permutation in String,https://leetcode.com/problems/permutation-in-string/,Check if s2 contains permutation of s1,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Maximum Average Subarray I,https://leetcode.com/problems/maximum-average-subarray-i/,Max average subarray size k,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Subarray Product Less Than K,https://leetcode.com/problems/subarray-product-less-than-k/,Count subarrays product < k,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Sliding Window,Count Number of Nice Subarrays,https://leetcode.com/problems/count-number-of-nice-subarrays/,Count subarrays with k odd nums,Enumerate every subarray and validate.,Fixed-size window with incremental updates.,Dynamic sliding window adjusting bounds in O(n).,O(n^2),O(n),O(1),O(k) or O(Alphabet)
Stack,Valid Parentheses,https://leetcode.com/problems/valid-parentheses/,Check balanced parentheses,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Min Stack,https://leetcode.com/problems/min-stack/,Stack with O(1) min retrieval,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Evaluate Reverse Polish Notation,https://leetcode.com/problems/evaluate-reverse-polish-notation/,Compute RPN expression,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Generate Parentheses,https://leetcode.com/problems/generate-parentheses/,All valid parentheses combos,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Daily Temperatures,https://leetcode.com/problems/daily-temperatures/,Next warmer day,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Car Fleet,https://leetcode.com/problems/car-fleet/,Number of car fleets to target,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Largest Rectangle in Histogram,https://leetcode.com/problems/largest-rectangle-in-histogram/,Max area histogram,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Basic Calculator II,https://leetcode.com/problems/basic-calculator-ii/,Evaluate expression with + - * /,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Simplify Path,https://leetcode.com/problems/simplify-path/,Canonical path of file system,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Stack,Remove K Digits,https://leetcode.com/problems/remove-k-digits/,Smallest number after removing k digits,Multiple scans or nested loops to find next greater etc.,Use auxiliary stack for indices.,Monotonic stack processes each element once.,O(n^2),O(n),O(1),O(n)
Binary Search,Binary Search,https://leetcode.com/problems/binary-search/,Find target in sorted array,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Search a 2D Matrix,https://leetcode.com/problems/search-a-2d-matrix/,Find target in sorted 2D matrix,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Search in Rotated Sorted Array,https://leetcode.com/problems/search-in-rotated-sorted-array/,Find target in rotated sorted array,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Find Minimum in Rotated Sorted Array,https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/,Find min in rotated sorted array,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Search Insert Position,https://leetcode.com/problems/search-insert-position/,Return insert index in sorted array,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Koko Eating Bananas,https://leetcode.com/problems/koko-eating-bananas/,Min eating speed to finish bananas,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Median of Two Sorted Arrays,https://leetcode.com/problems/median-of-two-sorted-arrays/,Find median of two sorted arrays,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Peak Index in a Mountain Array,https://leetcode.com/problems/peak-index-in-a-mountain-array/,Find peak in mountain array,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Split Array Largest Sum,https://leetcode.com/problems/split-array-largest-sum/,Min largest sum when split into m,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Binary Search,Capacity To Ship Packages Within D Days,https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/,Min ship capacity within days,Linear scan through array/values.,Use hash set to speed search.,Binary search/logarithmic search on sorted data.,O(n),O(log n),O(1),O(1)
Linked List,Reverse Linked List,https://leetcode.com/problems/reverse-linked-list/,Reverse singly linked list,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Merge Two Sorted Lists,https://leetcode.com/problems/merge-two-sorted-lists/,Merge two sorted linked lists,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Reorder List,https://leetcode.com/problems/reorder-list/,L0→Ln→L1→Ln-1…,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Remove Nth Node From End of List,https://leetcode.com/problems/remove-nth-node-from-end-of-list/,Delete nth node from end,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Linked List Cycle,https://leetcode.com/problems/linked-list-cycle/,Detect cycle in linked list,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Linked List Cycle II,https://leetcode.com/problems/linked-list-cycle-ii/,Return node where cycle begins,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Intersection of Two Linked Lists,https://leetcode.com/problems/intersection-of-two-linked-lists/,Get intersection node,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Add Two Numbers,https://leetcode.com/problems/add-two-numbers/,Add two numbers represented by linked lists,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,Copy List With Random Pointer,https://leetcode.com/problems/copy-list-with-random-pointer/,Deep copy list with random ptr,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Linked List,LRU Cache,https://leetcode.com/problems/lru-cache/,Design LRU cache,Convert to array then process.,Iterate with extra pointers or hashing.,Pointer manipulation with O(1) extra space.,O(n),O(n),O(n),O(1)
Trees,Maximum Depth of Binary Tree,https://leetcode.com/problems/maximum-depth-of-binary-tree/,Max depth,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Same Tree,https://leetcode.com/problems/same-tree/,Check identical trees,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Invert Binary Tree,https://leetcode.com/problems/invert-binary-tree/,Mirror tree,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Binary Tree Level Order Traversal,https://leetcode.com/problems/binary-tree-level-order-traversal/,Level-order list,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Binary Tree Right Side View,https://leetcode.com/problems/binary-tree-right-side-view/,Nodes visible from right,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Diameter of Binary Tree,https://leetcode.com/problems/diameter-of-binary-tree/,Longest path between two nodes,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Path Sum,https://leetcode.com/problems/path-sum/,Has root-to-leaf path sum,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Validate Binary Search Tree,https://leetcode.com/problems/validate-binary-search-tree/,Check BST validity,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Kth Smallest Element in a BST,https://leetcode.com/problems/kth-smallest-element-in-a-bst/,Find kth smallest,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Lowest Common Ancestor of a BST,https://leetcode.com/problems/lowest-common-ancestor-of-a-bst/,LCA in BST,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Serialize and Deserialize Binary Tree,https://leetcode.com/problems/serialize-and-deserialize-binary-tree/,Convert to string and back,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Construct Binary Tree from Preorder and Inorder,https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder/,Build tree from traversals,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Binary Tree Zigzag Level Order Traversal,https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/,Zigzag level order,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Binary Tree Maximum Path Sum,https://leetcode.com/problems/binary-tree-maximum-path-sum/,Max path sum,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Trees,Balanced Binary Tree,https://leetcode.com/problems/balanced-binary-tree/,Check height-balanced,Recurse for each node repeated computations.,DFS/BFS with memoization where needed.,Single DFS/BFS traversing each node once.,O(n^2),O(n),O(n),O(h)
Graphs,Clone Graph,https://leetcode.com/problems/clone-graph/,Deep copy undirected graph,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Number of Islands,https://leetcode.com/problems/number-of-islands/,Count islands in grid,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Max Area of Island,https://leetcode.com/problems/max-area-of-island/,Area largest island,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Number of Connected Components in an Undirected Graph,https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/,Count components,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Course Schedule,https://leetcode.com/problems/course-schedule/,Cycle detection in prerequisites,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Course Schedule II,https://leetcode.com/problems/course-schedule-ii/,Return order to finish courses,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Pacific Atlantic Water Flow,https://leetcode.com/problems/pacific-atlantic-water-flow/,Cells can flow to both oceans,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Word Ladder,https://leetcode.com/problems/word-ladder/,Shortest transformation sequence,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Reconstruct Itinerary,https://leetcode.com/problems/reconstruct-itinerary/,Find itinerary by lexical order,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Redundant Connection,https://leetcode.com/problems/redundant-connection/,Extra edge causing cycle,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Shortest Path in Binary Matrix,https://leetcode.com/problems/shortest-path-in-binary-matrix/,Shortest path in grid,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Cheapest Flights Within K Stops,https://leetcode.com/problems/cheapest-flights-within-k-stops/,Min cost flight within k stops,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Network Delay Time,https://leetcode.com/problems/network-delay-time/,Time to reach all nodes,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Graph Valid Tree,https://leetcode.com/problems/graph-valid-tree/,Determine if undirected graph is tree,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Evaluate Division,https://leetcode.com/problems/evaluate-division/,Evaluate variable equations,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Alien Dictionary,https://leetcode.com/problems/alien-dictionary/,Determine order of letters,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Critical Connections in a Network,https://leetcode.com/problems/critical-connections-in-a-network/,Find bridges in graph,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Swim in Rising Water,https://leetcode.com/problems/swim-in-rising-water/,Min time to reach cell,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Optimize Water Distribution in a Village,https://leetcode.com/problems/optimize-water-distribution-in-a-village/,Min cost water supply,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Graphs,Shortest Path Visiting All Nodes,https://leetcode.com/problems/shortest-path-visiting-all-nodes/,Shortest path visiting all nodes,For each node run BFS/DFS fresh.,Single traversal per component.,BFS/DFS/Dijkstra/Union-Find tailored per problem.,O(n^2),O(n + m),O(n),O(n)
Heap / Priority Queue,Kth Largest Element in an Array,https://leetcode.com/problems/kth-largest-element-in-an-array/,Find kth largest element,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Top K Frequent Elements,https://leetcode.com/problems/top-k-frequent-elements/,K most frequent using heap,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Last Stone Weight,https://leetcode.com/problems/last-stone-weight/,Simulate smashing stones,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Task Scheduler,https://leetcode.com/problems/task-scheduler/,Min intervals CPU scheduler,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Design Twitter,https://leetcode.com/problems/design-twitter/,Implement Twitter,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Merge k Sorted Lists,https://leetcode.com/problems/merge-k-sorted-lists/,Merge k sorted linked lists,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Find Median from Data Stream,https://leetcode.com/problems/find-median-from-data-stream/,Continuously get median,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Minimum Cost to Connect Sticks,https://leetcode.com/problems/minimum-cost-to-connect-sticks/,Min cost to connect sticks,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,Sliding Window Median,https://leetcode.com/problems/sliding-window-median/,Median each sliding window,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Heap / Priority Queue,IPO,https://leetcode.com/problems/ipo/,Max capital after k projects,Sort entire collection each query.,Maintain heap of size k.,Quickselect or heap with lazy deletion.,O(n log n),O(n log k) or O(n),O(1),O(k)
Backtracking,Subsets,https://leetcode.com/problems/subsets/,All subsets of set,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Subsets II,https://leetcode.com/problems/subsets-ii/,Subsets with duplicates,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Permutations,https://leetcode.com/problems/permutations/,All permutations,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Permutations II,https://leetcode.com/problems/permutations-ii/,Permutations with duplicates,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Combination Sum,https://leetcode.com/problems/combination-sum/,Combinations sum to target,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Combination Sum II,https://leetcode.com/problems/combination-sum-ii/,Combinations with candidate duplicates,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Letter Combinations of a Phone Number,https://leetcode.com/problems/letter-combinations-of-a-phone-number/,Map digits to letters,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Palindrome Partitioning,https://leetcode.com/problems/palindrome-partitioning/,All palindrome partitions,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Word Search,https://leetcode.com/problems/word-search/,Exist path forms word,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,N-Queens,https://leetcode.com/problems/n-queens/,Place queens on board,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Sudoku Solver,https://leetcode.com/problems/sudoku-solver/,Fill Sudoku board,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Combination Sum III,https://leetcode.com/problems/combination-sum-iii/,k numbers sum to n 1..9,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Restore IP Addresses,https://leetcode.com/problems/restore-ip-addresses/,Generate valid IP addresses,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Generate Parentheses,https://leetcode.com/problems/generate-parentheses/,All valid parentheses combos,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Backtracking,Increasing Subsequences,https://leetcode.com/problems/increasing-subsequences/,All increasing subsequences,Explore every combination without pruning.,Add constraints pruning invalid branches early.,Backtrack with smart ordering and memoization.,O(b^d),O(b^d) (pruned),O(d),O(d)
Dynamic Programming 1-D,Fibonacci Number,https://leetcode.com/problems/fibonacci-number/,Nth Fibonacci,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Climbing Stairs,https://leetcode.com/problems/climbing-stairs/,Ways to climb stairs,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Min Cost Climbing Stairs,https://leetcode.com/problems/min-cost-climbing-stairs/,Min cost to reach top,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,House Robber,https://leetcode.com/problems/house-robber/,Max loot non-adjacent,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,House Robber II,https://leetcode.com/problems/house-robber-ii/,Circular houses,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Maximum Subarray,https://leetcode.com/problems/maximum-subarray/,Largest sum subarray,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Jump Game,https://leetcode.com/problems/jump-game/,Can reach end,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Jump Game II,https://leetcode.com/problems/jump-game-ii/,Min jumps to end,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Coin Change,https://leetcode.com/problems/coin-change/,Min coins for amount,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Perfect Squares,https://leetcode.com/problems/perfect-squares/,Fewest perfect squares sum,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Partition Equal Subset Sum,https://leetcode.com/problems/partition-equal-subset-sum/,Split array equal sum,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Longest Increasing Subsequence,https://leetcode.com/problems/longest-increasing-subsequence/,Length LIS,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Maximum Product Subarray,https://leetcode.com/problems/maximum-product-subarray/,Max product subarray,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Word Break,https://leetcode.com/problems/word-break/,Can segment string dictionary,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 1-D,Decode Ways,https://leetcode.com/problems/decode-ways/,Number decodings numeric string,Recursive exponential branching.,Memoize recursion.,Iterative tabulation using 1-D state.,O(2^n),O(n),O(n),O(1)
Dynamic Programming 2-D,Unique Paths,https://leetcode.com/problems/unique-paths/,Robot unique paths,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Unique Paths II,https://leetcode.com/problems/unique-paths-ii/,Paths with obstacles,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Longest Common Subsequence,https://leetcode.com/problems/longest-common-subsequence/,Length LCS,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Longest Palindromic Substring,https://leetcode.com/problems/longest-palindromic-substring/,Longest palindrome in string,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Palindrome Partitioning II,https://leetcode.com/problems/palindrome-partitioning-ii/,Min cuts palindrome partition,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Edit Distance,https://leetcode.com/problems/edit-distance/,Min operations word transform,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Coin Change II,https://leetcode.com/problems/coin-change-ii/,Number ways make amount,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Target Sum,https://leetcode.com/problems/target-sum/,Assign +/- signs reach target,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Interleaving String,https://leetcode.com/problems/interleaving-string/,Check interleaving,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Maximal Square,https://leetcode.com/problems/maximal-square/,Max square of 1s in matrix,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Dungeon Game,https://leetcode.com/problems/dungeon-game/,Min health to survive dungeon,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Burst Balloons,https://leetcode.com/problems/burst-balloons/,Max coins bursting balloons,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Russian Doll Envelopes,https://leetcode.com/problems/russian-doll-envelopes/,Max envelope nesting,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Minimum Path Sum,https://leetcode.com/problems/minimum-path-sum/,Min sum path grid,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Scramble String,https://leetcode.com/problems/scramble-string/,Check if strings are scramble,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Shortest Common Supersequence,https://leetcode.com/problems/shortest-common-supersequence/,Shortest string containing both,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Regular Expression Matching,https://leetcode.com/problems/regular-expression-matching/,Pattern matching with . *,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Wildcard Matching,https://leetcode.com/problems/wildcard-matching/,Pattern matching with ? *,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Distinct Subsequences,https://leetcode.com/problems/distinct-subsequences/,Count distinct subseq equals target,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Dynamic Programming 2-D,Profitable Schemes,https://leetcode.com/problems/profitable-schemes/,Count schemes with profit >= threshold,Naive recursion over 2-D state.,Memoize recursion with 2-D table.,Bottom-up tabulation in 2-D table.,Exponential,O(n*m),O(n*m),O(n*m)
Greedy,Gas Station,https://leetcode.com/problems/gas-station/,Complete circuit gas station,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Candy,https://leetcode.com/problems/candy/,Min candies rating,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Partition Labels,https://leetcode.com/problems/partition-labels/,Split string unique letters,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Non-overlapping Intervals,https://leetcode.com/problems/non-overlapping-intervals/,Remove minimum intervals,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Queue Reconstruction by Height,https://leetcode.com/problems/queue-reconstruction-by-height/,Reconstruct queue,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Lemonade Change,https://leetcode.com/problems/lemonade-change/,"Given bills, return change",Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Minimum Number of Arrows to Burst Balloons,https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/,Min arrows burst balloons,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Monotone Increasing Digits,https://leetcode.com/problems/monotone-increasing-digits/,Largest monotone increasing <= N,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Reorganize String,https://leetcode.com/problems/reorganize-string/,Rearrange to avoid adjacent equal,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Greedy,Task Scheduler,https://leetcode.com/problems/task-scheduler/,Min intervals with cooldown,Enumerate all options to pick global optimum.,Sort then evaluate choices.,Choose locally optimal step that leads to global optimum.,O(n!) or exponential,O(n log n) or O(n),O(n),O(1)
Intervals,Merge Intervals,https://leetcode.com/problems/merge-intervals/,Merge overlapping intervals,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Insert Interval,https://leetcode.com/problems/insert-interval/,Insert interval into list,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Non-overlapping Intervals,https://leetcode.com/problems/non-overlapping-intervals/,Min remove to non-overlap,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Meeting Rooms,https://leetcode.com/problems/meeting-rooms/,Can attend all meetings,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Meeting Rooms II,https://leetcode.com/problems/meeting-rooms-ii/,Min conference rooms needed,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Interval List Intersections,https://leetcode.com/problems/interval-list-intersections/,Intersect two interval lists,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Employee Free Time,https://leetcode.com/problems/employee-free-time/,Common free time intervals,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Car Pooling,https://leetcode.com/problems/car-pooling/,Car pooling capacity trips,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Airplane Seat Assignment Probability,https://leetcode.com/problems/airplane-seat-assignment-probability/,Probability seat gets seat,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Intervals,Range Addition,https://leetcode.com/problems/range-addition/,Apply range increments,Compare every pair of intervals.,Sort intervals then merge/scan.,Single pass after sort.,O(n^2),O(n log n),O(1),O(1)
Design,LRU Cache,https://leetcode.com/problems/lru-cache/,Least recently used cache,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,LFU Cache,https://leetcode.com/problems/lfu-cache/,Least frequently used cache,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,Min Stack,https://leetcode.com/problems/min-stack/,Stack with min retrieval,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,Time Based Key-Value Store,https://leetcode.com/problems/time-based-key-value-store/,Store values with timestamps,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,Design Twitter,https://leetcode.com/problems/design-twitter/,Twitter Operations,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,Median Finder,https://leetcode.com/problems/median-finder/,Data stream median,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,Randomized Set,https://leetcode.com/problems/randomized-set/,Insert delete getRandom O(1),Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,Underground System,https://leetcode.com/problems/underground-system/,Track travel times,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,Browser History,https://leetcode.com/problems/browser-history/,Implement browser history,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Design,File System,https://leetcode.com/problems/file-system/,Design file system,Use basic data structures leading to O(n) operations.,Combine multiple structures for avg O(log n).,Custom structure to achieve required O(1)/O(log n).,O(n),O(1) or O(log n),Varies,O(n)
Math & Bit Manipulation,Sum of Two Integers,https://leetcode.com/problems/sum-of-two-integers/,Add without '+' operator,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Number of 1 Bits,https://leetcode.com/problems/number-of-1-bits/,Count set bits,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Counting Bits,https://leetcode.com/problems/counting-bits/,Bits count for 0..n,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Reverse Bits,https://leetcode.com/problems/reverse-bits/,Reverse bits of 32-bit,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Power of Two,https://leetcode.com/problems/power-of-two/,Check if power of two,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Power of Three,https://leetcode.com/problems/power-of-three/,Check if power of three,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Hamming Distance,https://leetcode.com/problems/hamming-distance/,Hamming distance between ints,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Single Number,https://leetcode.com/problems/single-number/,Find unique number,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Single Number II,https://leetcode.com/problems/single-number-ii/,Find unique where others thrice,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
Math & Bit Manipulation,Missing Number,https://leetcode.com/problems/missing-number/,Find missing from 0..n,Loop over bits / math operations straightforwardly.,Use bit tricks to optimize.,Apply bit manipulation & properties for constant operations.,O(n),O(1),O(1),O(1)
